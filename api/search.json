[{"id":"b64f86f375be7a8ad6ccdf0519ba2e1e","title":"搭建OpenVPN一键脚本","content":"直接展示脚本bin/bashfunction isRoot () &#123;\tif [ &quot;$EUID&quot; -ne 0 ]; then\t\treturn 1\tfi&#125;function tunAvailable () &#123;\tif [ ! -e /dev/net/tun ]; then\t\treturn 1\tfi&#125;function checkOS () &#123;\tif [[ -e /etc/debian_version ]]; then\t\tOS=&quot;debian&quot;\t\tsource /etc/os-release\t\tif [[ &quot;$ID&quot; == &quot;debian&quot; ]]; then\t\t\tif [[ ! $VERSION_ID =~ (8|9) ]]; then\t\t\t\techo &quot;⚠️ 当前脚本不支持此Debian版本.&quot;\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;但是，如果你使用的Debian系统版本 &gt;= 9 那么你可以尝试继续.&quot;\t\t\t\techo &quot;请注意他们不被支持&quot;\t\t\t\techo &quot;&quot;\t\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\t\t\t\t\tread -rp &quot;是否继续? [y/n]: &quot; -e CONTINUE\t\t\t\tdone\t\t\t\tif [[ &quot;$CONTINUE&quot; = &quot;n&quot; ]]; then\t\t\t\t\texit 1\t\t\t\tfi\t\t\tfi\t\telif [[ &quot;$ID&quot; == &quot;ubuntu&quot; ]];then\t\t\tOS=&quot;ubuntu&quot;\t\t\tif [[ ! $VERSION_ID =~ (16.04|18.04) ]]; then\t\t\t\techo &quot;⚠️ 当前脚本不支持此Ubuntu版本.&quot;\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;但是，如果你使用的Ubuntu系统版本 &gt; 17 or beta, 你可以继续安装.&quot;\t\t\t\techo &quot;请注意他们不被支持&quot;\t\t\t\techo &quot;&quot;\t\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\t\t\t\t\tread -rp &quot;是否继续? [y/n]: &quot; -e CONTINUE\t\t\t\tdone\t\t\t\tif [[ &quot;$CONTINUE&quot; = &quot;n&quot; ]]; then\t\t\t\t\texit 1\t\t\t\tfi\t\t\tfi\t\tfi\telif [[ -e /etc/fedora-release ]]; then\t\tOS=fedora\telif [[ -e /etc/centos-release ]]; then\t\tif ! grep -qs &quot;^CentOS Linux release 7&quot; /etc/centos-release; then\t\t\techo &quot;你的 CentOS 版本无法运行此脚本.&quot;\t\t\techo &quot;此脚本只能在 CentOS 7 中运行.&quot;\t\t\techo &quot;&quot;\t\t\tunset CONTINUE\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\t\t\t\tread -rp &quot;是否继续? [y/n]: &quot; -e CONTINUE\t\t\tdone\t\t\tif [[ &quot;$CONTINUE&quot; = &quot;n&quot; ]]; then\t\t\t\techo &quot;好吧,再见!&quot;\t\t\t\texit 1\t\t\tfi\t\tfi\t\tOS=centos\telif [[ -e /etc/arch-release ]]; then\t\tOS=arch\telse\t\techo &quot;发现你运行的Linux版本不在以下范围内: Debian, Ubuntu, Fedora, CentOS or Arch Linux system&quot;\t\texit 1\tfi&#125;function initialCheck () &#123;\tif ! isRoot; then\t\techo &quot;请使用root来进行操作&quot;\t\texit 1\tfi\tif ! tunAvailable; then\t\techo &quot;TUN 不可用&quot;\t\texit 1\tfi\tcheckOS&#125;function installUnbound () &#123;\tif [[ ! -e /etc/unbound/unbound.conf ]]; then\t\tif [[ &quot;$OS&quot; =~ (debian|ubuntu) ]]; then\t\t\tapt-get install -y unbound\t\t\t# Configuration\t\t\techo &#x27;interface: 10.8.0.1access-control: 10.8.0.1/24 allowhide-identity: yeshide-version: yesuse-caps-for-id: yesprefetch: yes&#x27; &gt;&gt; /etc/unbound/unbound.conf\t\telif [[ &quot;$OS&quot; = &quot;centos&quot; ]]; then\t\t\tyum install -y unbound\t\t\t# Configuration\t\t\tsed -i &#x27;s|# interface: 0.0.0.0$|interface: 10.8.0.1|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# access-control: 127.0.0.0/8 allow|access-control: 10.8.0.1/24 allow|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# hide-identity: no|hide-identity: yes|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# hide-version: no|hide-version: yes|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|use-caps-for-id: no|use-caps-for-id: yes|&#x27; /etc/unbound/unbound.conf\t\telif [[ &quot;$OS&quot; = &quot;fedora&quot; ]]; then\t\t\tdnf install -y unbound\t\t\t# Configuration\t\t\tsed -i &#x27;s|# interface: 0.0.0.0$|interface: 10.8.0.1|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# access-control: 127.0.0.0/8 allow|access-control: 10.8.0.1/24 allow|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# hide-identity: no|hide-identity: yes|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# hide-version: no|hide-version: yes|&#x27; /etc/unbound/unbound.conf\t\t\tsed -i &#x27;s|# use-caps-for-id: no|use-caps-for-id: yes|&#x27; /etc/unbound/unbound.conf\t\telif [[ &quot;$OS&quot; = &quot;arch&quot; ]]; then\t\t\tpacman -Syu --noconfirm unbound\t\t\t# Get root servers list\t\t\tcurl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache\t\t\tmv /etc/unbound/unbound.conf /etc/unbound/unbound.conf.old\t\t\t\techo &#x27;server:\tuse-syslog: yes\tdo-daemonize: no\tusername: &quot;unbound&quot;\tdirectory: &quot;/etc/unbound&quot;\ttrust-anchor-file: trusted-key.key\troot-hints: root.hints\tinterface: 10.8.0.1\taccess-control: 10.8.0.1/24 allow\tport: 53\tnum-threads: 2\tuse-caps-for-id: yes\tharden-glue: yes\thide-identity: yes\thide-version: yes\tqname-minimisation: yes\tprefetch: yes&#x27; &gt; /etc/unbound/unbound.conf\t\tfi\t\tif [[ ! &quot;$OS&quot; =~ (fedora|centos) ]];then\t\t\t# DNS Rebinding fix\t\t\techo &quot;private-address: 10.0.0.0/8private-address: 172.16.0.0/12private-address: 192.168.0.0/16private-address: 169.254.0.0/16private-address: fd00::/8private-address: fe80::/10private-address: 127.0.0.0/8private-address: ::ffff:0:0/96&quot; &gt;&gt; /etc/unbound/unbound.conf\t\tfi\telse # Unbound is already installed\t\techo &#x27;include: /etc/unbound/openvpn.conf&#x27; &gt;&gt; /etc/unbound/unbound.conf\t\t# Add Unbound &#x27;server&#x27; for the OpenVPN subnet\t\techo &#x27;server:interface: 10.8.0.1access-control: 10.8.0.1/24 allowhide-identity: yeshide-version: yesuse-caps-for-id: yesprefetch: yesprivate-address: 10.0.0.0/8private-address: 172.16.0.0/12private-address: 192.168.0.0/16private-address: 169.254.0.0/16private-address: fd00::/8private-address: fe80::/10private-address: 127.0.0.0/8private-address: ::ffff:0:0/96&#x27; &gt; /etc/unbound/openvpn.conf\tfi\t\tsystemctl enable unbound\t\tsystemctl restart unbound&#125;function installQuestions () &#123;\techo &quot;将会询问您一些必要的安装用的信息.&quot;\techo &quot;你可以修改默认选项或者一直按回车使用这些默认选项.&quot;\techo &quot;&quot;\techo &quot;我需要获取当前网络的 IPv4 地址 确保OpenVPN的正常安装.&quot;\techo &quot;除非你想要使用局域网，你需要有一个公网IP.&quot;\t# Detect public IPv4 address and pre-fill for the user\tIP=$(ip addr | grep &#x27;inet&#x27; | grep -v inet6 | grep -vE &#x27;127\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;&#x27; | grep -oE &#x27;[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;&#x27; | head -1)\tread -rp &quot;IP address: &quot; -e -i &quot;$IP&quot; IP\t# If $IP is a private IP address, the server must be behind NAT\tif echo &quot;$IP&quot; | grep -qE &#x27;^(10\\.|172\\.1[6789]\\.|172\\.2[0-9]\\.|172\\.3[01]\\.|192\\.168)&#x27;; then\t\techo &quot;&quot;\t\techo &quot;这看起来像是局域网，你的公网IP地址什么?&quot;\t\techo &quot;我们需要它来确保你的客户端连接此服务端.&quot;\t\tuntil [[ &quot;$PUBLICIP&quot; != &quot;&quot; ]]; do\t\t\tread -rp &quot;公网IPv4地址或者域名: &quot; -e PUBLICIP\t\tdone\tfi\techo &quot;&quot;\techo &quot;检查IPv6连通性...&quot;\techo &quot;&quot;\t# &quot;ping6&quot; and &quot;ping -6&quot; availability varies depending on the distribution\tif type ping6 &gt; /dev/null 2&gt;&amp;1; then\t\tPING6=&quot;ping6 -c3 ipv6.google.com &gt; /dev/null 2&gt;&amp;1&quot;\telse\t\tPING6=&quot;ping -6 -c3 ipv6.google.com &gt; /dev/null 2&gt;&amp;1&quot;\tfi\tif eval &quot;$PING6&quot;; then\t\techo &quot;当前host IPv6 连通性正常.&quot;\t\tSUGGESTION=&quot;y&quot;\telse\t\techo &quot;当前host IPv6 连通性不正常.&quot;\t\tSUGGESTION=&quot;n&quot;\tfi\techo &quot;&quot;\t# Ask the user if they want to enable IPv6 regardless its availability.\tuntil [[ $IPV6_SUPPORT =~ (y|n) ]]; do\t\tread -rp &quot;是否启用 IPv6 支持 (NAT)? [y/n]: &quot; -e -i $SUGGESTION IPV6_SUPPORT\tdone\techo &quot;&quot;\techo &quot;请选择 OpenVPN 监听的端口?&quot;\techo &quot;   1) 默认: 1194&quot;\techo &quot;   2) 输入&quot;\techo &quot;   3) 随机 [49152-65535]&quot;\tuntil [[ &quot;$PORT_CHOICE&quot; =~ ^[1-3]$ ]]; do\t\tread -rp &quot;端口选项 [1-3]: &quot; -e -i 1 PORT_CHOICE\tdone\tcase $PORT_CHOICE in\t\t1)\t\t\tPORT=&quot;1194&quot;\t\t;;\t\t2)\t\t\tuntil [[ &quot;$PORT&quot; =~ ^[0-9]+$ ]] &amp;&amp; [ &quot;$PORT&quot; -ge 1 ] &amp;&amp; [ &quot;$PORT&quot; -le 65535 ]; do\t\t\t\tread -rp &quot;输入端口 [1-65535]: &quot; -e -i 1194 PORT\t\t\tdone\t\t;;\t\t3)\t\t\t# Generate random number within private ports range\t\t\tPORT=$(shuf -i49152-65535 -n1)\t\t\techo &quot;随机端口: $PORT&quot;\t\t;;\tesac\techo &quot;&quot;\techo &quot;OpenVPN 使用什么协议 UDP/TCP?&quot;\techo &quot;UDP 十分快速. 除非UDP无法使用，不推荐使用TCP.&quot;\techo &quot;   1) UDP&quot;\techo &quot;   2) TCP&quot;\tuntil [[ &quot;$PROTOCOL_CHOICE&quot; =~ ^[1-2]$ ]]; do\t\tread -rp &quot;Protocol [1-2]: &quot; -e -i 1 PROTOCOL_CHOICE\tdone\tcase $PROTOCOL_CHOICE in\t\t1)\t\t\tPROTOCOL=&quot;udp&quot;\t\t;;\t\t2)\t\t\tPROTOCOL=&quot;tcp&quot;\t\t;;\tesac\techo &quot;&quot;\techo &quot;您希望将哪个DNS解析服务用于VPN ?&quot;\techo &quot;   1) 正确的系统解析器 (from /etc/resolv.conf)&quot;\techo &quot;   2) 当前host DNS 解析器 (Unbound)&quot;\techo &quot;   3) Cloudflare (Anycast: worldwide)&quot;\techo &quot;   4) Quad9 (Anycast: worldwide)&quot;\techo &quot;   5) Quad9 uncensored (Anycast: worldwide)&quot;\techo &quot;   6) FDN (France)&quot;\techo &quot;   7) DNS.WATCH (Germany)&quot;\techo &quot;   8) OpenDNS (Anycast: worldwide)&quot;\techo &quot;   9) Google (Anycast: worldwide)&quot;\techo &quot;   10) Yandex Basic (Russia)&quot;\techo &quot;   11) AdGuard DNS (Russia)&quot;\tuntil [[ &quot;$DNS&quot; =~ ^[0-9]+$ ]] &amp;&amp; [ &quot;$DNS&quot; -ge 1 ] &amp;&amp; [ &quot;$DNS&quot; -le 11 ]; do\t\tread -rp &quot;DNS [1-10]: &quot; -e -i 3 DNS\t\t\tif [[ $DNS == 2 ]] &amp;&amp; [[ -e /etc/unbound/unbound.conf ]]; then\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;Unbound 已经安装.&quot;\t\t\t\techo &quot;您可以允许脚本对其进行配置，以便从OpenVPN客户端使用它&quot;\t\t\t\techo &quot;我们将简单的添加一个服务端在 /etc/unbound/unbound.conf 对于OpenVPN子网.&quot;\t\t\t\techo &quot;没有对当前配置进行任何更改.&quot;\t\t\t\techo &quot;&quot;\t\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\t\t\t\t\tread -rp &quot;将配置更改应用于Unbound? 推荐默认回车 [y/n]: &quot; -e CONTINUE\t\t\t\tdone\t\t\t\tif [[ $CONTINUE = &quot;n&quot; ]];then\t\t\t\t\t# Break the loop and cleanup\t\t\t\t\tunset DNS\t\t\t\t\tunset CONTINUE\t\t\t\tfi\t\t\tfi\tdone\techo &quot;&quot;\techo &quot;你想使用压缩吗？ 由于VORACLE攻击使用它，因此不推荐使用它。&quot;\tuntil [[ $COMPRESSION_ENABLED =~ (y|n) ]]; do\t\tread -rp&quot;启用压缩 推荐默认回车? [y/n]: &quot; -e -i n COMPRESSION_ENABLED\tdone\tif [[ $COMPRESSION_ENABLED == &quot;y&quot; ]];then\t\techo &quot;选择一个压缩算法:&quot;\t\techo &quot;   1) LZ4 (更加效率)&quot;\t\techo &quot;   2) LZ0&quot;\t\tuntil [[ $COMPRESSION_CHOICE =~ ^[1-2]$ ]]; do\t\t\tread -rp&quot;压缩算法 [1-2]: &quot; -e -i 1 COMPRESSION_CHOICE\t\tdone\t\tcase $COMPRESSION_CHOICE in\t\t\t1)\t\t\tCOMPRESSION_ALG=&quot;lz4&quot;\t\t\t;;\t\t\t2)\t\t\tCOMPRESSION_ALG=&quot;lzo&quot;\t\t\t;;\t\tesac\tfi\techo &quot;&quot;\techo &quot;是否要自定义加密设置?&quot;\techo &quot;Unless you know what you&#x27;re doing, you should stick with the default parameters provided by the script.&quot;\techo &quot;除非你知道自己在做什么，否则你应该使用脚本提供的默认参数&quot;\techo &quot;&quot;\tuntil [[ $CUSTOMIZE_ENC =~ (y|n) ]]; do\t\tread -rp &quot;自定义加密设置? [y/n]: &quot; -e -i n CUSTOMIZE_ENC\tdone\tif [[ $CUSTOMIZE_ENC == &quot;n&quot; ]];then\t\t# Use default, sane and fast parameters\t\tCIPHER=&quot;AES-128-GCM&quot;\t\tCERT_TYPE=&quot;1&quot; # ECDSA\t\tCERT_CURVE=&quot;prime256v1&quot;\t\tCC_CIPHER=&quot;TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256&quot;\t\tDH_TYPE=&quot;1&quot; # ECDH\t\tDH_CURVE=&quot;prime256v1&quot;\t\tHMAC_ALG=&quot;SHA256&quot;\t\tTLS_SIG=&quot;1&quot; # tls-crypt\telse\t\techo &quot;&quot;\t\techo &quot;选择要用于数据通道的加密方式:&quot;\t\techo &quot;   1) AES-128-GCM (recommended)&quot;\t\techo &quot;   2) AES-192-GCM&quot;\t\techo &quot;   3) AES-256-GCM&quot;\t\techo &quot;   4) AES-128-CBC&quot;\t\techo &quot;   5) AES-192-CBC&quot;\t\techo &quot;   6) AES-256-CBC&quot;\t\tuntil [[ &quot;$CIPHER_CHOICE&quot; =~ ^[1-6]$ ]]; do\t\t\tread -rp &quot;加密方式 [1-6]: &quot; -e -i 1 CIPHER_CHOICE\t\tdone\t\tcase $CIPHER_CHOICE in\t\t\t1)\t\t\t\tCIPHER=&quot;AES-128-GCM&quot;\t\t\t;;\t\t\t2)\t\t\t\tCIPHER=&quot;AES-192-GCM&quot;\t\t\t;;\t\t\t3)\t\t\t\tCIPHER=&quot;AES-256-GCM&quot;\t\t\t;;\t\t\t4)\t\t\t\tCIPHER=&quot;AES-128-CBC&quot;\t\t\t;;\t\t\t5)\t\t\t\tCIPHER=&quot;AES-192-CBC&quot;\t\t\t;;\t\t\t6)\t\t\t\tCIPHER=&quot;AES-256-CBC&quot;\t\t\t;;\t\tesac\t\techo &quot;&quot;\t\techo &quot;选择您要使用的证书类型:&quot;\t\techo &quot;   1) ECDSA (recommended)&quot;\t\techo &quot;   2) RSA&quot;\t\tuntil [[ $CERT_TYPE =~ ^[1-2]$ ]]; do\t\t\tread -rp&quot;证书类型 [1-2]: &quot; -e -i 1 CERT_TYPE\t\tdone\t\tcase $CERT_TYPE in\t\t\t1)\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;选择要用于证书密钥的协议:&quot;\t\t\t\techo &quot;   1) prime256v1 (recommended)&quot;\t\t\t\techo &quot;   2) secp384r1&quot;\t\t\t\techo &quot;   3) secp521r1&quot;\t\t\t\tuntil [[ $CERT_CURVE_CHOICE =~ ^[1-3]$ ]]; do\t\t\t\t\tread -rp&quot;Curve [1-3]: &quot; -e -i 1 CERT_CURVE_CHOICE\t\t\t\tdone\t\t\t\tcase $CERT_CURVE_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tCERT_CURVE=&quot;prime256v1&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tCERT_CURVE=&quot;secp384r1&quot;\t\t\t\t\t;;\t\t\t\t\t3)\t\t\t\t\t\tCERT_CURVE=&quot;secp521r1&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\t\t2)\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;选择要用于证书的RSA密钥的大小:&quot;\t\t\t\techo &quot;   1) 2048 bits (recommended)&quot;\t\t\t\techo &quot;   2) 3072 bits&quot;\t\t\t\techo &quot;   3) 4096 bits&quot;\t\t\t\tuntil [[ &quot;$RSA_KEY_SIZE_CHOICE&quot; =~ ^[1-3]$ ]]; do\t\t\t\t\tread -rp &quot;RSA key size [1-3]: &quot; -e -i 1 RSA_KEY_SIZE_CHOICE\t\t\t\tdone\t\t\t\tcase $RSA_KEY_SIZE_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tRSA_KEY_SIZE=&quot;2048&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tRSA_KEY_SIZE=&quot;3072&quot;\t\t\t\t\t;;\t\t\t\t\t3)\t\t\t\t\t\tRSA_KEY_SIZE=&quot;4096&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\tesac\t\techo &quot;&quot;\t\techo &quot;选择要用于控制通道的加密方式:&quot;\t\tcase $CERT_TYPE in\t\t\t1)\t\t\t\techo &quot;   1) ECDHE-ECDSA-AES-128-GCM-SHA256 (recommended)&quot;\t\t\t\techo &quot;   2) ECDHE-ECDSA-AES-256-GCM-SHA384&quot;\t\t\t\tuntil [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do\t\t\t\t\tread -rp&quot;Control channel cipher [1-2]: &quot; -e -i 1 CC_CIPHER_CHOICE\t\t\t\tdone\t\t\t\tcase $CC_CIPHER_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tCC_CIPHER=&quot;TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tCC_CIPHER=&quot;TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\t\t2)\t\t\t\techo &quot;   1) ECDHE-RSA-AES-128-GCM-SHA256 (recommended)&quot;\t\t\t\techo &quot;   2) ECDHE-RSA-AES-256-GCM-SHA384&quot;\t\t\t\tuntil [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do\t\t\t\t\tread -rp&quot;Control channel cipher [1-2]: &quot; -e -i 1 CC_CIPHER_CHOICE\t\t\t\tdone\t\t\t\tcase $CC_CIPHER_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tCC_CIPHER=&quot;TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tCC_CIPHER=&quot;TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\tesac\t\techo &quot;&quot;\t\techo &quot;选择您要使用的Diffie-Hellman口令:&quot;\t\techo &quot;   1) ECDH (recommended)&quot;\t\techo &quot;   2) DH&quot;\t\tuntil [[ $DH_TYPE =~ [1-2] ]]; do\t\t\tread -rp&quot;DH 口令类型 [1-2]: &quot; -e -i 1 DH_TYPE\t\tdone\t\tcase $DH_TYPE in\t\t\t1)\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;选择要用于ECDH口令:&quot;\t\t\t\techo &quot;   1) prime256v1 (recommended)&quot;\t\t\t\techo &quot;   2) secp384r1&quot;\t\t\t\techo &quot;   3) secp521r1&quot;\t\t\t\twhile [[ $DH_CURVE_CHOICE != &quot;1&quot; &amp;&amp; $DH_CURVE_CHOICE != &quot;2&quot; &amp;&amp; $DH_CURVE_CHOICE != &quot;3&quot; ]]; do\t\t\t\t\tread -rp&quot;Curve [1-3]: &quot; -e -i 1 DH_CURVE_CHOICE\t\t\t\tdone\t\t\t\tcase $DH_CURVE_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tDH_CURVE=&quot;prime256v1&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tDH_CURVE=&quot;secp384r1&quot;\t\t\t\t\t;;\t\t\t\t\t3)\t\t\t\t\t\tDH_CURVE=&quot;secp521r1&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\t\t2)\t\t\t\techo &quot;&quot;\t\t\t\techo &quot;选择要使用的Diffie-Hellman键的大小:&quot;\t\t\t\techo &quot;   1) 2048 bits (recommended)&quot;\t\t\t\techo &quot;   2) 3072 bits&quot;\t\t\t\techo &quot;   3) 4096 bits&quot;\t\t\t\tuntil [[ &quot;$DH_KEY_SIZE_CHOICE&quot; =~ ^[1-3]$ ]]; do\t\t\t\t\tread -rp &quot;DH key size [1-3]: &quot; -e -i 1 DH_KEY_SIZE_CHOICE\t\t\t\tdone\t\t\t\tcase $DH_KEY_SIZE_CHOICE in\t\t\t\t\t1)\t\t\t\t\t\tDH_KEY_SIZE=&quot;2048&quot;\t\t\t\t\t;;\t\t\t\t\t2)\t\t\t\t\t\tDH_KEY_SIZE=&quot;3072&quot;\t\t\t\t\t;;\t\t\t\t\t3)\t\t\t\t\t\tDH_KEY_SIZE=&quot;4096&quot;\t\t\t\t\t;;\t\t\t\tesac\t\t\t;;\t\tesac\t\techo &quot;&quot;\t\t# The &quot;auth&quot; options behaves differently with AEAD ciphers\t\tif [[ &quot;$CIPHER&quot; =~ CBC$ ]]; then\t\t\techo &quot;摘要算法验证来自控制信道的数据信道分组和tls-auth分组.&quot;\t\telif [[ &quot;$CIPHER&quot; =~ GCM$ ]]; then\t\t\techo &quot;摘要算法验证来自控制信道的tls-auth数据包.&quot;\t\tfi\t\techo &quot;哪种摘要算法用于你的 HMAC?&quot;\t\techo &quot;   1) SHA-256 (recommended)&quot;\t\techo &quot;   2) SHA-384&quot;\t\techo &quot;   3) SHA-512&quot;\t\tuntil [[ $HMAC_ALG_CHOICE =~ ^[1-3]$ ]]; do\t\t\tread -rp &quot;Digest algorithm [1-3]: &quot; -e -i 1 HMAC_ALG_CHOICE\t\tdone\t\tcase $HMAC_ALG_CHOICE in\t\t\t1)\t\t\t\tHMAC_ALG=&quot;SHA256&quot;\t\t\t;;\t\t\t2)\t\t\t\tHMAC_ALG=&quot;SHA384&quot;\t\t\t;;\t\t\t3)\t\t\t\tHMAC_ALG=&quot;SHA512&quot;\t\t\t;;\t\tesac\t\techo &quot;&quot;\t\techo &quot;您可以使用tls-auth和tls-crypt向控制通道添加额外的安全层&quot;\t\techo &quot;tls-auth对数据包进行身份验证，而tls-crypt对其进行身份验证和加密.&quot;\t\techo &quot;   1) tls-crypt (recommended)&quot;\t\techo &quot;   2) tls-auth&quot;\t\tuntil [[ $TLS_SIG =~ [1-2] ]]; do\t\t\t\tread -rp &quot;Control channel additional security mechanism [1-2]: &quot; -e -i 1 TLS_SIG\t\tdone\tfi\techo &quot;&quot;\techo &quot;安装信息收集完成，现在准备好设置您的OpenVPN服务器.&quot;\techo &quot;您将能够在安装结束时生成客户端.&quot;\tread -n1 -r -p &quot;按下任意键继续...&quot;&#125;function installOpenVPN () &#123;\t# Run setup questions first\tinstallQuestions\t# Get the &quot;public&quot; interface from the default route\tNIC=$(ip -4 route ls | grep default | grep -Po &#x27;(?&lt;=dev )(\\S+)&#x27; | head -1)\tif [[ &quot;$OS&quot; =~ (debian|ubuntu) ]]; then\t\tapt-get update\t\tapt-get -y install ca-certificates gnupg\t\t# We add the OpenVPN repo to get the latest version.\t\tif [[ &quot;$VERSION_ID&quot; = &quot;8&quot; ]]; then\t\t\techo &quot;deb http://build.openvpn.net/debian/openvpn/stable jessie main&quot; &gt; /etc/apt/sources.list.d/openvpn.list\t\t\twget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -\t\t\tapt-get update\t\tfi\t\tif [[ &quot;$VERSION_ID&quot; = &quot;16.04&quot; ]]; then\t\t\techo &quot;deb http://build.openvpn.net/debian/openvpn/stable trusty main&quot; &gt; /etc/apt/sources.list.d/openvpn.list\t\t\twget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -\t\t\tapt-get update\t\tfi\t\t# Ubuntu &gt; 16.04 and Debian &gt; 8 have OpenVPN &gt;= 2.4 without the need of a third party repository.\t\tapt-get install -y openvpn iptables openssl wget ca-certificates curl\telif [[ &quot;$OS&quot; = &#x27;centos&#x27; ]]; then\t\tyum install -y epel-release\t\tyum install -y openvpn iptables openssl wget ca-certificates curl\telif [[ &quot;$OS&quot; = &#x27;fedora&#x27; ]]; then\t\tdnf install -y openvpn iptables openssl wget ca-certificates curl\telif [[ &quot;$OS&quot; = &#x27;arch&#x27; ]]; then\t\techo &quot;&quot;\t\techo &quot;警告：当您使用ArchLinux时，我需要更新系统上的软件包以安装我需要的软件包.&quot;\t\techo &quot;不这样做可能会导致依赖关系之间出现问题，或者丢失存储库中的文件（Arch Linux不支持部分升级）.&quot;\t\techo &quot;&quot;\t\techo &quot;继续将更新您安装的软件包并安装所需的软件包.&quot;\t\techo &quot;&quot;\t\tunset CONTINUE\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\t\t\tread -rp &quot;继续? [y/n]: &quot; -e -i y CONTINUE\t\tdone\t\tif [[ &quot;$CONTINUE&quot; = &quot;n&quot; ]]; then\t\t\techo &quot;终止安装 是用户不允许更新系统.&quot;\t\t\texit 4\t\tfi\t\t# Install required dependencies and upgrade the system\t\tpacman --needed --noconfirm -Syu openvpn iptables openssl wget ca-certificates curl\tfi\t# Find out if the machine uses nogroup or nobody for the permissionless group\tif grep -qs &quot;^nogroup:&quot; /etc/group; then\t\tNOGROUP=nogroup\telse\t\tNOGROUP=nobody\tfi\t# An old version of easy-rsa was available by default in some openvpn packages\tif [[ -d /etc/openvpn/easy-rsa/ ]]; then\t\trm -rf /etc/openvpn/easy-rsa/\tfi\t# Install the latest version of easy-rsa from source\tlocal version=&quot;3.0.5&quot;\twget -O ~/EasyRSA-nix-$&#123;version&#125;.tgz https://github.com/OpenVPN/easy-rsa/releases/download/v$&#123;version&#125;/EasyRSA-nix-$&#123;version&#125;.tgz\ttar xzf ~/EasyRSA-nix-$&#123;version&#125;.tgz -C ~/\tmv ~/EasyRSA-$&#123;version&#125;/ /etc/openvpn/\tmv /etc/openvpn/EasyRSA-$&#123;version&#125;/ /etc/openvpn/easy-rsa/\tchown -R root:root /etc/openvpn/easy-rsa/\trm -f ~/EasyRSA-nix-$&#123;version&#125;.tgz\tcd /etc/openvpn/easy-rsa/\tcase $CERT_TYPE in\t\t1)\t\t\techo &quot;set_var EASYRSA_ALGO ec&quot; &gt; vars\t\t\techo &quot;set_var EASYRSA_CURVE $CERT_CURVE&quot; &gt;&gt; vars\t\t;;\t\t2)\t\t\techo &quot;set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE&quot; &gt; vars\t\t;;\tesac\t# Generate a random, alphanumeric identifier of 16 characters for CN and one for server name\tSERVER_CN=&quot;cn_$(head /dev/urandom | tr -dc &#x27;a-zA-Z0-9&#x27; | fold -w 16 | head -n 1)&quot;\tSERVER_NAME=&quot;server_$(head /dev/urandom | tr -dc &#x27;a-zA-Z0-9&#x27; | fold -w 16 | head -n 1)&quot;\techo &quot;set_var EASYRSA_REQ_CN $SERVER_CN&quot; &gt;&gt; vars\t# Create the PKI, set up the CA, the DH params and the server certificate\t./easyrsa init-pki\t./easyrsa --batch build-ca nopass\tif [[ $DH_TYPE == &quot;2&quot; ]]; then\t\t# ECDH keys are generated on-the-fly so we don&#x27;t need to generate them beforehand\t\topenssl dhparam -out dh.pem $DH_KEY_SIZE\tfi\t./easyrsa build-server-full &quot;$SERVER_NAME&quot; nopass\tEASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl\tcase $TLS_SIG in\t\t1)\t\t\t# Generate tls-crypt key\t\t\topenvpn --genkey --secret /etc/openvpn/tls-crypt.key\t\t;;\t\t2)\t\t\t# Generate tls-auth key\t\t\topenvpn --genkey --secret /etc/openvpn/tls-auth.key\t\t;;\tesac\t# Move all the generated files\tcp pki/ca.crt pki/private/ca.key &quot;pki/issued/$SERVER_NAME.crt&quot; &quot;pki/private/$SERVER_NAME.key&quot; /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn\tif [[ $DH_TYPE == &quot;2&quot; ]]; then\t\tcp dh.pem /etc/openvpn\tfi\t# Make cert revocation list readable for non-root\tchmod 644 /etc/openvpn/crl.pem\t# Generate server.conf\techo &quot;port $PORT&quot; &gt; /etc/openvpn/server.conf\tif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;n&#x27; ]]; then\t\techo &quot;proto $PROTOCOL&quot; &gt;&gt; /etc/openvpn/server.conf\telif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;y&#x27; ]]; then\t\techo &quot;proto $&#123;PROTOCOL&#125;6&quot; &gt;&gt; /etc/openvpn/server.conf\tfi\techo &quot;dev tunuser nobodygroup $NOGROUPpersist-keypersist-tunkeepalive 10 120topology subnetserver 10.8.0.0 255.255.255.0ifconfig-pool-persist ipp.txt&quot; &gt;&gt; /etc/openvpn/server.conf\t# DNS resolvers\tcase $DNS in\t\t1)\t\t\t# Locate the proper resolv.conf\t\t\t# Needed for systems running systemd-resolved\t\t\tif grep -q &quot;127.0.0.53&quot; &quot;/etc/resolv.conf&quot;; then\t\t\t\tRESOLVCONF=&#x27;/run/systemd/resolve/resolv.conf&#x27;\t\t\telse\t\t\t\tRESOLVCONF=&#x27;/etc/resolv.conf&#x27;\t\t\tfi\t\t\t# Obtain the resolvers from resolv.conf and use them for OpenVPN\t\t\tgrep -v &#x27;#&#x27; $RESOLVCONF | grep &#x27;nameserver&#x27; | grep -E -o &#x27;[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;&#x27; | while read -r line; do\t\t\t\techo &quot;push \\&quot;dhcp-option DNS $line\\&quot;&quot; &gt;&gt; /etc/openvpn/server.conf\t\t\tdone\t\t;;\t\t2)\t\t\techo &#x27;push &quot;dhcp-option DNS 10.8.0.1&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t3) # Cloudflare\t\t\techo &#x27;push &quot;dhcp-option DNS 1.0.0.1&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 1.1.1.1&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t4) # Quad9\t\t\techo &#x27;push &quot;dhcp-option DNS 9.9.9.9&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 149.112.112.112&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t5) # Quad9 uncensored\t\t\techo &#x27;push &quot;dhcp-option DNS 9.9.9.10&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 149.112.112.10&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t6) # FDN\t\t\techo &#x27;push &quot;dhcp-option DNS 80.67.169.40&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 80.67.169.12&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t7) # DNS.WATCH\t\t\techo &#x27;push &quot;dhcp-option DNS 84.200.69.80&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 84.200.70.40&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t8) # OpenDNS\t\t\techo &#x27;push &quot;dhcp-option DNS 208.67.222.222&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 208.67.220.220&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t9) # Google\t\t\techo &#x27;push &quot;dhcp-option DNS 8.8.8.8&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 8.8.4.4&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t10) # Yandex Basic\t\t\techo &#x27;push &quot;dhcp-option DNS 77.88.8.8&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 77.88.8.1&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t11) # AdGuard DNS\t\t\techo &#x27;push &quot;dhcp-option DNS 176.103.130.130&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t\techo &#x27;push &quot;dhcp-option DNS 176.103.130.131&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\t\t;;\tesac\techo &#x27;push &quot;redirect-gateway def1 bypass-dhcp&quot; &#x27;&gt;&gt; /etc/openvpn/server.conf\t# IPv6 network settings if needed\tif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;y&#x27; ]]; then\t\techo &#x27;server-ipv6 fd42:42:42:42::/112tun-ipv6push tun-ipv6push &quot;route-ipv6 2000::/3&quot;push &quot;redirect-gateway ipv6&quot;&#x27; &gt;&gt; /etc/openvpn/server.conf\tfi\tif [[ $COMPRESSION_ENABLED == &quot;y&quot;  ]]; then\t\techo &quot;compress $COMPRESSION_ALG&quot; &gt;&gt; /etc/openvpn/server.conf\tfi\tif [[ $DH_TYPE == &quot;1&quot; ]]; then\t\techo &quot;dh none&quot; &gt;&gt; /etc/openvpn/server.conf\t\techo &quot;ecdh-curve $DH_CURVE&quot; &gt;&gt; /etc/openvpn/server.conf\telif [[ $DH_TYPE == &quot;2&quot; ]]; then\t\techo &quot;dh dh.pem&quot; &gt;&gt; /etc/openvpn/server.conf\tfi\tcase $TLS_SIG in\t\t1)\t\t\techo &quot;tls-crypt tls-crypt.key 0&quot; &gt;&gt; /etc/openvpn/server.conf\t\t;;\t\t2)\t\t\techo &quot;tls-auth tls-auth.key 0&quot; &gt;&gt; /etc/openvpn/server.conf\t\t;;\tesac\techo &quot;crl-verify crl.pemca ca.crtcert $SERVER_NAME.crtkey $SERVER_NAME.key auth $HMAC_ALGcipher $CIPHERncp-ciphers $CIPHERtls-servertls-version-min 1.2tls-cipher $CC_CIPHERstatus /var/log/openvpn/status.logverb 3&quot; &gt;&gt; /etc/openvpn/server.conf\t# Create log dir\tmkdir -p /var/log/openvpn\t# Enable routing\techo &#x27;net.ipv4.ip_forward=1&#x27; &gt;&gt; /etc/sysctl.d/20-openvpn.conf\tif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;y&#x27; ]]; then\t\techo &#x27;net.ipv6.conf.all.forwarding=1&#x27; &gt;&gt; /etc/sysctl.d/20-openvpn.conf\tfi\t# Avoid an unneeded reboot\tsysctl --system\t# If SELinux is enabled and a custom port was selected, we need this\tif hash sestatus 2&gt;/dev/null; then\t\tif sestatus | grep &quot;Current mode&quot; | grep -qs &quot;enforcing&quot;; then\t\t\tif [[ &quot;$PORT&quot; != &#x27;1194&#x27; ]]; then\t\t\t\tsemanage port -a -t openvpn_port_t -p &quot;$PROTOCOL&quot; &quot;$PORT&quot;\t\t\tfi\t\tfi\tfi\t# Finally, restart and enable OpenVPN\tif [[ &quot;$OS&quot; = &#x27;arch&#x27; || &quot;$OS&quot; = &#x27;fedora&#x27; ]]; then\t\t# Don&#x27;t modify package-provided service\t\tcp /usr/lib/systemd/system/openvpn-server@.service /etc/systemd/system/openvpn-server@.service\t\t# Workaround to fix OpenVPN service on OpenVZ\t\tsed -i &#x27;s|LimitNPROC|#LimitNPROC|&#x27; /etc/systemd/system/openvpn-server@.service\t\t# Another workaround to keep using /etc/openvpn/\t\tsed -i &#x27;s|/etc/openvpn/server|/etc/openvpn|&#x27; /etc/systemd/system/openvpn-server@.service\t\t# On fedora, the service hardcodes the ciphers. We want to manage the cipher ourselves, so we remove it from the service\t\tif [[ &quot;$OS&quot; == &quot;fedora&quot; ]];then\t\t\tsed -i &#x27;s|--cipher AES-256-GCM --ncp-ciphers AES-256-GCM:AES-128-GCM:AES-256-CBC:AES-128-CBC:BF-CBC||&#x27; /etc/systemd/system/openvpn-server@.service\t\tfi\t\tsystemctl daemon-reload\t\tsystemctl restart openvpn-server@server\t\tsystemctl enable openvpn-server@server\telif [[ &quot;$OS&quot; == &quot;ubuntu&quot; ]] &amp;&amp; [[ &quot;$VERSION_ID&quot; == &quot;16.04&quot; ]]; then\t\t# On Ubuntu 16.04, we use the package from the OpenVPN repo\t\t# This package uses a sysvinit service\t\tsystemctl enable openvpn\t\tsystemctl start openvpn\telse\t\t# Don&#x27;t modify package-provided service\t\tcp /lib/systemd/system/openvpn\\@.service /etc/systemd/system/openvpn\\@.service\t\t# Workaround to fix OpenVPN service on OpenVZ\t\tsed -i &#x27;s|LimitNPROC|#LimitNPROC|&#x27; /etc/systemd/system/openvpn\\@.service\t\t# Another workaround to keep using /etc/openvpn/\t\tsed -i &#x27;s|/etc/openvpn/server|/etc/openvpn|&#x27; /etc/systemd/system/openvpn\\@.service\t\tsystemctl daemon-reload\t\tsystemctl restart openvpn@server\t\tsystemctl enable openvpn@server\tfi\tif [[ $DNS == 2 ]];then\t\tinstallUnbound\tfi\t# Add iptables rules in two scripts\tmkdir /etc/iptables\t# Script to add rules\techo &quot;#!/bin/shiptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o $NIC -j MASQUERADEiptables -A INPUT -i tun0 -j ACCEPTiptables -A FORWARD -i $NIC -o tun0 -j ACCEPTiptables -A FORWARD -i tun0 -o $NIC -j ACCEPTiptables -A INPUT -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT&quot; &gt; /etc/iptables/add-openvpn-rules.sh\tif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;y&#x27; ]]; then\t\techo &quot;ip6tables -t nat -A POSTROUTING -s fd42:42:42:42::/112 -o $NIC -j MASQUERADEip6tables -A INPUT -i tun0 -j ACCEPTip6tables -A FORWARD -i $NIC -o tun0 -j ACCEPTip6tables -A FORWARD -i tun0 -o $NIC -j ACCEPT&quot; &gt;&gt; /etc/iptables/add-openvpn-rules.sh\tfi\t# Script to remove rules\techo &quot;#!/bin/shiptables -t nat -D POSTROUTING -s 10.8.0.0/24 -o $NIC -j MASQUERADEiptables -D INPUT -i tun0 -j ACCEPTiptables -D FORWARD -i $NIC -o tun0 -j ACCEPTiptables -D FORWARD -i tun0 -o $NIC -j ACCEPTiptables -D INPUT -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT&quot; &gt; /etc/iptables/rm-openvpn-rules.sh\tif [[ &quot;$IPV6_SUPPORT&quot; = &#x27;y&#x27; ]]; then\t\techo &quot;ip6tables -t nat -D POSTROUTING -s fd42:42:42:42::/112 -o $NIC -j MASQUERADEip6tables -D INPUT -i tun0 -j ACCEPTip6tables -D FORWARD -i $NIC -o tun0 -j ACCEPTip6tables -D FORWARD -i tun0 -o $NIC -j ACCEPT&quot; &gt;&gt; /etc/iptables/rm-openvpn-rules.sh\tfi\tchmod +x /etc/iptables/add-openvpn-rules.sh\tchmod +x /etc/iptables/rm-openvpn-rules.sh\t# Handle the rules via a systemd script\techo &quot;[Unit]Description=iptables rules for OpenVPNBefore=network-online.targetWants=network-online.target[Service]Type=oneshotExecStart=/etc/iptables/add-openvpn-rules.shExecStop=/etc/iptables/rm-openvpn-rules.shRemainAfterExit=yes[Install]WantedBy=multi-user.target&quot; &gt; /etc/systemd/system/iptables-openvpn.service\t# Enable service and apply rules\tsystemctl daemon-reload\tsystemctl enable iptables-openvpn\tsystemctl start iptables-openvpn\t# If the server is behind a NAT, use the correct IP address for the clients to connect to\tif [[ &quot;$PUBLICIP&quot; != &quot;&quot; ]]; then\t\tIP=$PUBLICIP\tfi\t# client-template.txt is created so we have a template to add further users later\techo &quot;client&quot; &gt; /etc/openvpn/client-template.txt\tif [[ &quot;$PROTOCOL&quot; = &#x27;udp&#x27; ]]; then\t\techo &quot;proto udp&quot; &gt;&gt; /etc/openvpn/client-template.txt\telif [[ &quot;$PROTOCOL&quot; = &#x27;tcp&#x27; ]]; then\t\techo &quot;proto tcp-client&quot; &gt;&gt; /etc/openvpn/client-template.txt\tfi\techo &quot;remote $IP $PORTdev tunresolv-retry infinitenobindpersist-keypersist-tunremote-cert-tls serververify-x509-name $SERVER_NAME nameauth $HMAC_ALGauth-nocachecipher $CIPHERtls-clienttls-version-min 1.2tls-cipher $CC_CIPHERsetenv opt block-outside-dns # Prevent Windows 10 DNS leakverb 3&quot; &gt;&gt; /etc/openvpn/client-template.txtif [[ $COMPRESSION_ENABLED == &quot;y&quot;  ]]; then\techo &quot;compress $COMPRESSION_ALG&quot; &gt;&gt; /etc/openvpn/client-template.txtfi\t# Generate the custom client.ovpn\tnewClient\techo &quot;如果要添加更多客户端，只需再次运行此脚本即可&quot;&#125;function newClient () &#123;\techo &quot;&quot;\techo &quot;输入用户的用户名.&quot;\techo &quot;请不要输入特殊字符.&quot;\tuntil [[ &quot;$CLIENT&quot; =~ ^[a-zA-Z0-9_]+$ ]]; do\t\tread -rp &quot;用户名: &quot; -e CLIENT\tdone\techo &quot;&quot;\techo &quot;是否要使用密码认证配置文件?&quot;\techo &quot;(e.g. 使用密码加密私钥)&quot;\techo &quot;   1) 添加一个不需要密码的用户&quot;\techo &quot;   2) 添加一个需要密码的用户&quot;\tuntil [[ &quot;$PASS&quot; =~ ^[1-2]$ ]]; do\t\tread -rp &quot;Select an option [1-2]: &quot; -e -i 1 PASS\tdone\tcd /etc/openvpn/easy-rsa/ || return\tcase $PASS in\t\t1)\t\t\t./easyrsa build-client-full &quot;$CLIENT&quot; nopass\t\t;;\t\t2)\t\techo &quot;⚠️ 您将被要求提供用户的密码 ⚠️&quot;\t\t\t./easyrsa build-client-full &quot;$CLIENT&quot;\t\t;;\tesac\t# Home directory of the user, where the client configuration (.ovpn) will be written\tif [ -e &quot;/home/$CLIENT&quot; ]; then  # if $1 is a user name\t\thomeDir=&quot;/home/$CLIENT&quot;\telif [ &quot;$&#123;SUDO_USER&#125;&quot; ]; then   # if not, use SUDO_USER\t\thomeDir=&quot;/home/$&#123;SUDO_USER&#125;&quot;\telse  # if not SUDO_USER, use /root\t\thomeDir=&quot;/root&quot;\tfi\t# Determine if we use tls-auth or tls-crypt\tif grep -qs &quot;^tls-crypt&quot; /etc/openvpn/server.conf; then\t\tTLS_SIG=&quot;1&quot;\telif grep -qs &quot;^tls-auth&quot; /etc/openvpn/server.conf; then\t\tTLS_SIG=&quot;2&quot;\tfi\t# Generates the custom client.ovpn\tcp /etc/openvpn/client-template.txt &quot;$homeDir/$CLIENT.ovpn&quot;\t&#123;\t\techo &quot;&lt;ca&gt;&quot;\t\tcat &quot;/etc/openvpn/easy-rsa/pki/ca.crt&quot;\t\techo &quot;&lt;/ca&gt;&quot;\t\techo &quot;&lt;cert&gt;&quot;\t\tawk &#x27;/BEGIN/,/END/&#x27; &quot;/etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt&quot;\t\techo &quot;&lt;/cert&gt;&quot;\t\techo &quot;&lt;key&gt;&quot;\t\tcat &quot;/etc/openvpn/easy-rsa/pki/private/$CLIENT.key&quot;\t\techo &quot;&lt;/key&gt;&quot;\t\tcase $TLS_SIG in\t\t\t1)\t\t\t\techo &quot;&lt;tls-crypt&gt;&quot;\t\t\t\tcat /etc/openvpn/tls-crypt.key\t\t\t\techo &quot;&lt;/tls-crypt&gt;&quot;\t\t\t;;\t\t\t2)\t\t\t\techo &quot;key-direction 1&quot;\t\t\t\techo &quot;&lt;tls-auth&gt;&quot;\t\t\t\tcat /etc/openvpn/tls-auth.key\t\t\t\techo &quot;&lt;/tls-auth&gt;&quot;\t\t\t;;\t\tesac\t&#125; &gt;&gt; &quot;$homeDir/$CLIENT.ovpn&quot;\techo &quot;&quot;\techo &quot;Client $CLIENT added, the configuration file is available at $homeDir/$CLIENT.ovpn.&quot;\techo &quot;下载 .ovpn 配置文件并且导入到你的OpenVPN客户端.&quot;&#125;function revokeClient () &#123;\tNUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c &quot;^V&quot;)\tif [[ &quot;$NUMBEROFCLIENTS&quot; = &#x27;0&#x27; ]]; then\t\techo &quot;&quot;\t\techo &quot;当前没有用户!&quot;\t\texit 1\tfi\techo &quot;&quot;\techo &quot;Select the existing client certificate you want to revoke&quot;\ttail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep &quot;^V&quot; | cut -d &#x27;=&#x27; -f 2 | nl -s &#x27;) &#x27;\tif [[ &quot;$NUMBEROFCLIENTS&quot; = &#x27;1&#x27; ]]; then\t\tread -rp &quot;选择一个用户 [1]: &quot; CLIENTNUMBER\telse\t\tread -rp &quot;选择一个用户 [1-$NUMBEROFCLIENTS]: &quot; CLIENTNUMBER\tfi\tCLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep &quot;^V&quot; | cut -d &#x27;=&#x27; -f 2 | sed -n &quot;$CLIENTNUMBER&quot;p)\tcd /etc/openvpn/easy-rsa/\t./easyrsa --batch revoke &quot;$CLIENT&quot;\tEASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl\t# Cleanup\trm -f &quot;pki/reqs/$CLIENT.req&quot;\trm -f &quot;pki/private/$CLIENT.key&quot;\trm -f &quot;pki/issued/$CLIENT.crt&quot;\trm -f /etc/openvpn/crl.pem\tcp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem\tchmod 644 /etc/openvpn/crl.pem\tfind /home/ -maxdepth 2 -name &quot;$CLIENT.ovpn&quot; -delete\trm -f &quot;/root/$CLIENT.ovpn&quot;\tsed -i &quot;s|^$CLIENT,.*||&quot; /etc/openvpn/ipp.txt\techo &quot;&quot;\techo &quot;客户端证书 $CLIENT 已经移除.&quot;&#125;function removeUnbound () &#123;\t# Remove OpenVPN-related config\tsed -i &#x27;s|include: \\/etc\\/unbound\\/openvpn.conf||&#x27; /etc/unbound/unbound.conf\trm /etc/unbound/openvpn.conf\tsystemctl restart unbound\tuntil [[ $REMOVE_UNBOUND =~ (y|n) ]]; do\t\techo &quot;&quot;\t\techo &quot;如果您在安装OpenVPN之前已经使用了Unbound，我删除了与OpenVPN相关的配置.&quot;\t\tread -rp &quot;确定完全删除 Unbound? [y/n]: &quot; -e REMOVE_UNBOUND\tdone\tif [[ &quot;$REMOVE_UNBOUND&quot; = &#x27;y&#x27; ]]; then\t\t# Stop Unbound\t\tsystemctl stop unbound\t\tif [[ &quot;$OS&quot; =~ (debian|ubuntu) ]]; then\t\t\tapt-get autoremove --purge -y unbound\t\telif [[ &quot;$OS&quot; = &#x27;arch&#x27; ]]; then\t\t\tpacman --noconfirm -R unbound\t\telif [[ &quot;$OS&quot; = &#x27;centos&#x27; ]]; then\t\t\tyum remove -y unbound\t\telif [[ &quot;$OS&quot; = &#x27;fedora&#x27; ]]; then\t\t\tdnf remove -y unbound\t\tfi\t\trm -rf /etc/unbound/\t\techo &quot;&quot;\t\techo &quot;Unbound 删除成功!&quot;\telse\t\techo &quot;&quot;\t\techo &quot;Unbound 删除终止.&quot;\tfi&#125;function removeOpenVPN () &#123;\techo &quot;&quot;\tread -rp &quot;确定要卸载OpenVPN? [y/n]: &quot; -e -i n REMOVE\tif [[ &quot;$REMOVE&quot; = &#x27;y&#x27; ]]; then\t\t# Get OpenVPN port from the configuration\t\tPORT=$(grep &#x27;^port &#x27; /etc/openvpn/server.conf | cut -d &quot; &quot; -f 2)\t\t# Stop OpenVPN\t\tif [[ &quot;$OS&quot; =~ (fedora|arch) ]]; then\t\t\tsystemctl disable openvpn-server@server\t\t\tsystemctl stop openvpn-server@server\t\t\t# Remove customised service\t\t\trm /etc/systemd/system/openvpn-server@.service\t\telif [[ &quot;$OS&quot; == &quot;ubuntu&quot; ]] &amp;&amp; [[ &quot;$VERSION_ID&quot; == &quot;16.04&quot; ]]; then\t\t\tsystemctl disable openvpn\t\t\tsystemctl stop openvpn\t\telse\t\t\tsystemctl disable openvpn@server\t\t\tsystemctl stop openvpn@server\t\t\t# Remove customised service\t\t\trm /etc/systemd/system/openvpn\\@.service\t\tfi\t\t# Remove the iptables rules related to the script\t\tsystemctl stop iptables-openvpn\t\t# Cleanup\t\tsystemctl disable iptables-openvpn\t\trm /etc/systemd/system/iptables-openvpn.service\t\tsystemctl daemon-reload\t\trm /etc/iptables/add-openvpn-rules.sh\t\trm /etc/iptables/rm-openvpn-rules.sh\t\t# SELinux\t\tif hash sestatus 2&gt;/dev/null; then\t\t\tif sestatus | grep &quot;Current mode&quot; | grep -qs &quot;enforcing&quot;; then\t\t\t\tif [[ &quot;$PORT&quot; != &#x27;1194&#x27; ]]; then\t\t\t\t\tsemanage port -d -t openvpn_port_t -p udp &quot;$PORT&quot;\t\t\t\tfi\t\t\tfi\t\tfi\t\tif [[ &quot;$OS&quot; =~ (debian|ubuntu) ]]; then\t\t\tapt-get autoremove --purge -y openvpn\t\t\tif [[ -e /etc/apt/sources.list.d/openvpn.list ]];then\t\t\t\trm /etc/apt/sources.list.d/openvpn.list\t\t\t\tapt-get update\t\t\tfi\t\telif [[ &quot;$OS&quot; = &#x27;arch&#x27; ]]; then\t\t\tpacman --noconfirm -R openvpn\t\telif [[ &quot;$OS&quot; = &#x27;centos&#x27; ]]; then\t\t\tyum remove -y openvpn\t\telif [[ &quot;$OS&quot; = &#x27;fedora&#x27; ]]; then\t\t\tdnf remove -y openvpn\t\tfi\t\t# Cleanup\t\tfind /home/ -maxdepth 2 -name &quot;*.ovpn&quot; -delete\t\tfind /root/ -maxdepth 1 -name &quot;*.ovpn&quot; -delete\t\trm -rf /etc/openvpn\t\trm -rf /usr/share/doc/openvpn*\t\trm -f /etc/sysctl.d/20-openvpn.conf\t\trm -rf /var/log/openvpn\t\t# Unbound\t\tif [[ -e /etc/unbound/openvpn.conf ]]; then\t\t\tremoveUnbound\t\tfi\t\techo &quot;&quot;\t\techo &quot;OpenVPN 卸载成功!&quot;\telse\t\techo &quot;&quot;\t\techo &quot;卸载终止!&quot;\tfi&#125;function manageMenu () &#123;\tclear\techo &quot;欢迎使用OpenVPN一键脚本!&quot;\techo &quot;脚本原作者: https://github.com/angristan/openvpn-install&quot;\techo &quot;脚本汉化: pingchuan&quot;\techo &quot;&quot;\techo &quot;OpenVPN 已经正常安装.&quot;\techo &quot;&quot;\techo &quot;请选择你要进行的操作?&quot;\techo &quot;   1) 添加一个用户&quot;\techo &quot;   2) 删除一个存在的用户&quot;\techo &quot;   3) 卸载OpenVPN&quot;\techo &quot;   4) 退出&quot;\tuntil [[ &quot;$MENU_OPTION&quot; =~ ^[1-4]$ ]]; do\t\tread -rp &quot;选择选项 [1-4]: &quot; MENU_OPTION\tdone\tcase $MENU_OPTION in\t\t1)\t\t\tnewClient\t\t;;\t\t2)\t\t\trevokeClient\t\t;;\t\t3)\t\t\tremoveOpenVPN\t\t;;\t\t4)\t\t\texit 0\t\t;;\tesac&#125;# Check for root, TUN, OS...initialCheck# Check if OpenVPN is already installedif [[ -e /etc/openvpn/server.conf ]]; then\tmanageMenuelse\tinstallOpenVPNfi\n","slug":"搭建OpenVPN一键脚本","date":"2024-09-30T05:39:32.999Z","categories_index":"OpenVPN","tags_index":"OpenVPN,开源,Linux","author_index":"Aurora"},{"id":"37eadf13cf8e6f83452d28040d5362dd","title":"在禁食中操练成长","content":"\n\n\n\n\n\n\n\n\n扎根基督，向上成长，这里是《成主学堂》。我是张凡！在我日常的工作中，会有一些不同的任务和事务需要处理，但是我非常享受的一件就是安安静静的阅读大家的来信，无论是短信还是电邮。很多来信我会委托给我的同工来进行回复，但是我会认真地阅读每一封来信，透过这些来信拉进了我和你之间的距离，让我知道这些课程是有人听的，而且是非常认真地在听，这对我既是鼓励，也是鞭策。盼望我们可以透过这些课程一起来学习，也一起成长。如果你有什么代祷事项，你也可以来信让我知道，我们一起为你祷告，盼望我们之间的连接透过广播可以继续延展。近期我们一直在学习的课程是“成长成熟”，目的是透过一些实际的操练，帮助我们的属灵生命能不断成长，且日渐成熟。今天，我们来到这个课程的第7讲──在禁食中操练成长。说到禁食，相信每一位基督徒都非常熟悉了。其实禁食有两层含义。首先是广义上的“禁食”，也就是清教徒神学家钟马田所说的“禁食”，是指“停止某个正当的做法，为了成就属灵的目的”。它可以包括饮食，但不局限于饮食，也就是说为了属灵的目的，我们停止某个可能容易干扰我们的事务。从这个角度来说，我们可以“禁食”，也可以是“禁电视”、“禁网络”、“禁手机”等等。好让我们能安心亲近主。另外一层就是更狭义的定义：为了属灵的目的而自愿地停止摄取食物──包括食物和饮料。我们今天的课程主要探讨的是这种类型的禁食，圣经所描述的也是这种类型的、狭义的禁食。\n\n\n\n\n\n\n\n\n\n其实在圣经旧约中充满了关于禁食的记载，有集体的禁食，也有个人的禁食。或者为了表达悲伤，或为了表达谦卑，有时候也为了表达认罪。撒母耳记下1:12大卫就撕裂衣服，跟随他的人也是如此，而且悲哀哭号，禁食到晚上，是因扫罗和他儿子约拿单，并耶和华的民以色列家的人，倒在刀下。在以斯拉记8:21：“那时，我在亚哈瓦河边宣告禁食，为要在我们神面前克苦己心，求他使我们和妇人孩子，并一切所有的，都得平坦的道路。”我盼望大家读这些经文的时候不要一带而过，而是认真去读。当来到新约的时候，圣经也充满了关于禁食的记载。除了很多以色列人在实践旧约中包括禁食在内的属灵操练外，我们看到耶稣自己也禁食。马太福音4:1-2：“当时，耶稣被圣灵引到旷野，受魔鬼的试探。他禁食四十昼夜，后来就饿了。”耶稣不但自己禁食，他也教导他的门徒该怎样禁食。在使徒行传中，教会领袖们在选立宣教士和长老的时候，先禁食祷告。保罗也在他的书信中多次提到禁食。所以，我们完全有理由相信，禁食是一个非常重要的属灵操练。那么作为今天的我们，当我们讲到禁食的时候，禁食包括哪些要素呢？\n禁食包括什么\n我们可以简单看一下，在圣经中，禁食包括了四个要素：放弃什么和放弃多少、谁参加禁食、禁食的时间，以及禁食的频率。放弃什么和放弃多少也就是禁食的内容和程度。我们可以不同的程度来放弃饮食。常规的禁食就是放弃所有的饮食，不吃也不喝。但是部分的禁食是指有限地摄取饮食，不是什么都不吃。而是非常有限地摄取简单和基本的饮食。那谁来禁食呢，也就是禁食的参与者。通常情况下是个人的禁食。当耶稣在教导登山宝训时，他所说的禁食就是个人的禁食。耶稣指出，这样的禁食不应当是做给别人看的。在马太福音6:17-18：“你禁食的时候，要梳头洗脸，不要叫人看出你禁食来，只叫你暗中的父看见；你父在暗中察看，必然报答你。”除了个人操练禁食外，也有可能是小组禁食，也就是说小范围的团契，甚至是会众，整个教会一起操练禁食。这是禁食的参与者。那么禁食的时间长度呢？圣经并没有规定禁食一定要多久。圣经中的例子包括了一天中的部分时间，一整天禁食、三天禁食、七天禁食、二十一天禁食，以及四十天的超自然禁食。除此以外，圣经还记载了很多禁食却没有描述这些禁食的长度。不但禁食的时间长短不一，禁食的频率也各不相同。圣经中有规律的禁食，比如，以色列人在赎罪日的时候禁食，法利赛人在路加福音18:12表示他们每周有两次禁食。除了规律性的禁食以外，有需要时就可以禁食。当出现某种需要时，禁食就会发生。圣经中所描述的大多数禁食都是属于此类。刚刚提到禁食的时间长度、频率是互相独立的，你可以根据你的实际情况采取适合你的开始操练。那有一个关键问题是：今天的基督徒也要这样禁食吗？\n今天的基督徒也要这样禁食吗？在回答这个问题之前，我们首先要思想的是新约圣经如何对待我们日用的饮食。在新约圣经中，食物被看作是神所赐的美好。食物是神美好创造的一部分，只要是出于感恩的心而领受，就是好的。保罗曾在提摩太书信警告读者一种禁欲主义，这种禁欲主义事实上是忽视了或扭曲了神赐给我们食物这一事实，轻看了神的良善。我要强调的是，基督徒的禁食并非禁欲主义。在歌罗西书2:20-23，保罗警告说这种禁欲主义是羞辱基督的，因为它否认了基督救赎的足够性，也否认了基督的位格和基督的工作。保罗是这样说的：“你们若是与基督同死，脱离了世上的小学，为什么仍像在世俗中活着、服从那‘不可拿、不可尝、不可摸’等类的规条呢？这都是照人所吩咐、所教导的。说到这一切，正用的时候就都败坏了。这些规条使人徒有智慧之名，用私意崇拜，自表谦卑，苦待己身，其实在克制肉体的情欲上是毫无功效。”我们不要以为少吃或者不吃东西，就能给人带来属灵益处。禁食没那么简单。吃或者不吃并不是一个关乎属灵生命的核心决定，但是我们的动机和决定却能体现我们是爱神、知足，还是不爱神和不知足。我们注意到，在旧约圣经中神指定要在赎罪日有全民族的、一年一次的禁食，新约圣经却没有这样明确的命令。然而，耶稣却教导他的门徒们如何禁食，这表明说禁食的操练是被期待的。我们可以再一次阅读马太福音6:16-18中耶稣的教导：“你们禁食的时候，不可像那假冒为善的人，脸上带着愁容；因为他们把脸弄得难看，故意叫人看出他们是禁食。我实在告诉你们，他们已经得了他们的赏赐。你禁食的时候，要梳头洗脸，不要叫人看出你禁食来，只叫你暗中的父看见；你父在暗中察看，必然报答你。”这段经文有一些值得注意的地方。基督给我们一个负面的命令、一个正面的命令，以及一个应许：负面的命令是什么呢：不要像假冒伪善的人，脸上带着愁容。正面的命令呢：要梳头洗脸，只叫你暗中的父看见。还有一个应许：你父在暗中察看，必然报答你。请注意，耶稣在这里并没有给出任何的具体命令。他没有说什么时候应该禁食，也没有说禁食应该有多长。所以禁食不应当成为一个律法式的要求，好像有一个标准模式一样，而是一个基督徒的特权和机会好寻求神的恩典。我们不应当忽视禁食，但是我们怎样禁食这件事情，应当让圣灵来带领，因为圣灵帮助我们理解神的话语，也把真理的原则在不同的情形下，应用在我们的身上。\n为什么要禁食？我们需要首先认识到基督徒的禁食，是有属灵意义和目的的，禁食的目的是为了建立我们与基督的关系。如果禁食是为了其他的目的，比如减肥、手术前需要空腹、健身、省钱等等，这都不是我们今天所说的基督徒的禁食。那么作为基督徒，我们为什么要禁食，或者说禁食的目的是什么呢？\n禁食是为了加强祷告以斯拉记8:21的经文这样说：“那时，我在亚哈瓦河边宣告禁食，为要在我们神面前克苦己心，求他使我们和妇人孩子，并一切所有的，都得平坦的道路。”请注意，圣经并不是说禁食是一种属灵的绝食，为要逼迫神按照我们所祈求的去做。禁食不能改变神怎么听我们祷告，禁食只能改变我们的祷告。基督徒在祷告时禁食是用一种神所指定的方式，在沟通他们真心、急切的祷告。\n禁食是为了寻求神的引导士师记20:26记述了这样的一件事情：“以色列众人就上到伯特利，坐在耶和华面前哭号，当日禁食直到晚上；又在耶和华面前献燔祭和平安祭。”他们为了要寻求神的引导。同样，我们要注意，禁食不能保证神一定给你清楚的带领，但是禁食能够让我们对神的带领更加敏感，帮助我们把注意力从世界转向神，这样我们就可以更加用心地读神的话语。在使徒行传中，领袖们在差派保罗和巴拿巴之前禁食寻求，他们想要对圣灵的引导更加的敏感，所以他们禁食。\n禁食是为了寻求保护和拯救历代志下20:2-4：“有人来报告约沙法说：‘从海外亚兰那边有大军来攻击你，如今他们在哈洗逊‧他玛，就是隐‧基底。’约沙法便惧怕，定意寻求耶和华，在犹大全地宣告禁食。于是犹大人聚会，求耶和华帮助。犹大各城都有人出来寻求耶和华。”今天，当我们遭遇来自家庭、学校、邻居、社会的逼迫时，禁食是我们寻求神帮助的工具，也构成我们的保护和防线。\n禁食是为了表达悲伤圣经中有很多例子是为着落在神子民身上的灾难或罪恶，而在神面前表示悲伤。例如撒母耳记下1:11-12：“大卫就撕裂衣服，跟随他的人也是如此，而且悲哀哭号，禁食到晚上，是因扫罗和他儿子约拿单，并耶和华的民以色列家的人，倒在刀下。”我们之前在认罪这一讲提到认罪并不是简单的说一堆话，合乎圣经的认罪也包括了为自己的罪而感到忧伤，而禁食正是合乎圣经的忧伤的表达方式之一。一位基督徒作家在他的书中这样说：有些时候，我的罪令我如此忧伤，以至于我的语言已经不足以用来向神表达我的情感。虽然禁食并不能让我更配得到神的怜悯，却可以以超越语言的方式，表达我的忧伤和认罪。所以禁食可以表达我们的悲伤，为罪悔改和对神的信靠。\n禁食表达我们对神工作的关注但以理书9:2-3写道：“就是他在位第一年，我但以理从书上得知耶和华的话临到先知耶利米，论耶路撒冷荒凉的年数，七十年为满。我便禁食，披麻蒙灰，定意向主神祈祷恳求。”我不是说我们要整天禁食、一直禁食，来表达我们对神工作的关注。但是神有的时候让我们对祂的工作分外地感到有负担，圣灵会让我们感到有禁食的必要。我们用禁食来表达对神工作的关注。\n禁食是表达对神的爱和敬拜禁食意味着说我们爱神超过爱食物。当你禁食的时候，你是在拒绝自己对食物的渴慕来追求培养对神的渴慕。寻求神比寻求吃喝更加重要。当你在禁食的时候，如果你的饥饿感上来了，你就被提醒说你的胃不是你的上帝，你的禁食荣耀真上帝。所以，我们刚才简单列举了一些禁食的好理由。但是请记住，禁食总是有属灵目的的──以神为中心的目的，而不是自我中心的目的。\n总结最后，我们有一个总结。禁食测验我们的心，禁食拷问我们的心在哪里。禁食帮助我们把焦点放在神和神的话语身上，禁食教导我们：我们的心应当与神同在，而不是与世界同在。所以，我鼓励大家回去以后花一点时间思想禁食的这些目的。亲爱的弟兄姊妹，亲爱的朋友，或许，你在某件重要的事情上需要神的引导和光照。或许，你的祷告无法专注，总是被世界的事情打扰。或许，你正在和某一个罪争战。无论你的问题是什么，禁食可以成为神的一个恩典管道，帮助你转向这位足够的神。让我们一起在禁食中操练成长吧！\n","slug":"在禁食中操练成长","date":"2024-09-30T03:00:36.170Z","categories_index":"基督,天主","tags_index":"基督教,天主,上帝,禁食","author_index":"Aurora"}]